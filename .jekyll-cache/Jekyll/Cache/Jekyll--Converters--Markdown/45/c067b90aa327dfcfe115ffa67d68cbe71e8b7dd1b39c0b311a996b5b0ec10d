I"A{<p align="center">
  <img src="https://raw.githubusercontent.com/openintegrationhub/openintegrationhub.github.io/master/assets/images/large-oih-vertikal-zentriert.png" alt="Open Integration Hub" width="300" />
</p>
<p><br />
<br /></p>

<h1 id="local-installation-guide">Local Installation Guide</h1>

<p><img src="https://img.shields.io/badge/Linux-red.svg" alt="linux" /> <img src="https://img.shields.io/badge/Windows-blue.svg" alt="Windows" /></p>

<p>In addition to setting up the Open Integration Hub on a cloud infrastructure such as GCP it is also possible to setup a local version of the framework. Make sure to perform the following to set up a local version of the OIH within your own minikube:</p>

<ul>
  <li><a href="#requirements">Requirements</a></li>
  <li><a href="#installation">Installation</a>
    <ul>
      <li><a href="#install-minikube">Install Minikube</a></li>
      <li><a href="#basic-open-integration-hub-infrastructure-setup">Basic Open Integration Hub Infrastructure Setup</a></li>
      <li><a href="#host-rules-setup">Host Rules Setup</a></li>
      <li><a href="#identity-and-access-management-deployment">Identity and Access Management Deployment</a></li>
      <li><a href="#service-account-creation">Service Account Creation</a>
        <ul>
          <li><a href="#login-as-admin">Login as Admin</a></li>
          <li><a href="#create-a-service-account">Create a Service Account</a></li>
          <li><a href="#create-persistent-service-token">Create persistent Service Token</a></li>
        </ul>
      </li>
      <li><a href="#shared-secret-application">Shared Secret Application</a></li>
      <li><a href="#service-deployment">Service Deployment</a></li>
      <li><a href="#service-availability">Service Availability</a></li>
    </ul>
  </li>
  <li><a href="#usage">Usage</a>
    <ul>
      <li><a href="#creating-components">Creating Components</a></li>
      <li><a href="#creating-flows">Creating Flows</a></li>
      <li><a href="#starting-flows">Starting Flows</a></li>
      <li><a href="#lessons-learned">Lessons Learned</a></li>
    </ul>
  </li>
</ul>

<h1 id="requirements">Requirements</h1>

<p><strong>Please make sure to clone the <a href="https://github.com/openintegrationhub/openintegrationhub">monorepo</a> before you start.</strong></p>

<p>Make sure that minikube is endowed with sufficient resources. We suggest at least:</p>

<ul>
  <li><em>8GB of memory</em></li>
  <li><em>4 CPUs</em></li>
</ul>

<div style="
    margin: 10px 0px;
    background: #f8f8f8;
    padding: 10px;
    border-radius: 3px;
    font-size: 1em;
    border: 1px solid #9c9c9c;">
    <div style="float: left; margin-right: 10px;">
<img src="https://img.shields.io/badge/Windows-blue.svg" height="30" />
</div>
If you're using Windows we suggest to use virtual box. In order to use it, Hyper-V must be disabled <a href="https://docs.microsoft.com/de-de/virtualization/hyper-v-on-windows/quick-start/enable-hyper-v">Enable/Disable Hyper-V on Windows 10.</a> You may also have to enable virtualisation features in your BIOS.
</div>

<h1 id="installation">Installation</h1>

<h2 id="install-minikube">Install Minikube</h2>

<p>Make sure minikube is installed, configured, and started. The command for allocating sufficient resources is</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>minikube start --memory 8192 --cpus 4
</code></pre></div></div>

<p>If you already have an installed minikube instance that is using the virtualbox driver you can do</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>minikube stop
</code></pre></div></div>

<p>and then</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>VBoxManage modifyvm "minikube" --memory 8192 --cpus 4
</code></pre></div></div>

<p>to adjust the resource limits before starting again.</p>

<p>In particular, ensure that its ingress module is enabled (<code class="language-plaintext highlighter-rouge">minikube addons enable ingress</code>).  Also make sure that <code class="language-plaintext highlighter-rouge">kubectl</code> is configured to use minikube. To see if its correctly configured use</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>`kubectl config current-context
or
cluster info`
</code></pre></div></div>

<p>For further information about how to set up minikube, see here:</p>

<ul>
  <li><a href="https://kubernetes.io/docs/tasks/tools/install-minikube/">Install Minikube</a></li>
  <li><a href="https://kubernetes.io/docs/setup/learning-environment/minikube/">Installing Kubernetes with Minikube</a></li>
</ul>

<div style="
    margin: 10px 0px;
    background: #f8f8f8;
    padding: 10px;
    border-radius: 3px;
    font-size: 1em;
    border: 1px solid #9c9c9c;">
    <div style="float: left; margin-right: 10px;">
<img src="https://img.shields.io/badge/Windows-blue.svg" height="30" />
</div>
If you're using Docker for Windows it overwrites the acutal kubectl version. In order to fix this download the `kubectl.exe` from <a href="https://kubernetes.io/docs/tasks/tools/install-kubectl/#install-kubectl-on-windows">Install kubectl on Windows</a>. Navigate to the docker directory (e.g. Program Files\Docker\Docker\resources\bin) and replace the kubectl.exe in this folder with the one you just downloaded.
</div>

<h2 id="basic-open-integration-hub-infrastructure-setup">Basic Open Integration Hub Infrastructure Setup</h2>

<p><strong>Please make sure to clone the <a href="https://github.com/openintegrationhub/openintegrationhub">monorepo</a> before you start. You will need the files in the minikube folder.</strong></p>

<p>Set up the basic Open Integration Hub infrastructure. To do this, simply execute</p>

<p><code class="language-plaintext highlighter-rouge">kubectl apply -f ./1-Platform</code></p>

<p>This may take a while to finish. You can use <code class="language-plaintext highlighter-rouge">minikube dashboard</code> to check the status of the various deployments. Once they are all ready, you can proceed.</p>

<h2 id="host-rules-setup">Host Rules Setup</h2>

<p>To actually reach the services, you need to add an entry in your hosts file for each service. You can retrieve the IP with <code class="language-plaintext highlighter-rouge">minikube ip</code> and need to create an entry for each host listed in the <code class="language-plaintext highlighter-rouge">ingress.yaml</code> file (e.g. <code class="language-plaintext highlighter-rouge">iam.localoih.com</code>).
If you are using…</p>

<p>a <strong>Linux</strong> distribution, you can automate this by using this terminal command:</p>

<div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">echo "$</span><span class="o">(</span>minikube ip<span class="o">)</span> app-directory.localoih.com iam.localoih.com skm.localoih.com flow-repository.localoih.com auditlog.localoih.com metadata.localoih.com component-repository.localoih.com dispatcher-service.localoih.com webhooks.localoih.com attachment-storage-service.localoih.com data-hub.localoih.com ils.localoih.com web-ui.localoih.com<span class="s2">" | sudo tee -a /etc/hosts
</span></code></pre></div></div>

<p>a <strong>Windows</strong> distribution, you can find the host files under:</p>

<div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="go">c:\windows\system32\etc\hosts
or
c:\windows\system32\drivers\etc\hosts

then add

your_minikube_ip app-directory.localoih.com
your_minikube_ip iam.localoih.com
your_minikube_ip skm.localoih.com
your_minikube_ip flow-repository.localoih.com
your_minikube_ip auditlog.localoih.com
your_minikube_ip dispatcher-service.localoih.com
your_minikube_ip metadata.localoih.com
your_minikube_ip component-repository.localoih.com
your_minikube_ip webhooks.localoih.com
your_minikube_ip attachment-storage-service.localoih.com
your_minikube_ip data-hub.localoih.com
your_minikube_ip ils.localoih.com
your_minikube_ip web-ui.localoih.com
</span></code></pre></div></div>

<h2 id="identity-and-access-management-deployment">Identity and Access Management Deployment</h2>

<p>Deploy the OIH Identity and Access Management. To do so, simply execute <code class="language-plaintext highlighter-rouge">kubectl apply -f ./2-IAM</code>. Again, wait until the service is fully deployed and ready.</p>

<h2 id="service-account-creation">Service Account Creation</h2>

<p>Create a service account and token for the other services in the IAM. Using Postman (or another similar tool of choice), send these POST requests to the IAM.</p>

<p><strong>Base URL:</strong> <code class="language-plaintext highlighter-rouge">iam.localoih.com</code></p>

<p><strong>Header:</strong> <code class="language-plaintext highlighter-rouge">Content-Type: application/json</code>:</p>

<h3 id="login-as-admin">Login as Admin</h3>

<p><em>Path</em>:</p>

<p><code class="language-plaintext highlighter-rouge">/login</code></p>

<p><em>Request Body:</em></p>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="w">  </span><span class="p">{</span><span class="w">
    </span><span class="nl">"username"</span><span class="p">:</span><span class="w"> </span><span class="s2">"admin@openintegrationhub.com"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"password"</span><span class="p">:</span><span class="w"> </span><span class="s2">"somestring"</span><span class="w">
  </span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<p><em>Response Body Structure:</em></p>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="w">  </span><span class="p">{</span><span class="w">
    </span><span class="nl">"token"</span><span class="p">:</span><span class="w"> </span><span class="s2">"string"</span><span class="w">
  </span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<p>Use the returned <code class="language-plaintext highlighter-rouge">token</code> as a Bearer token for the remaining requests.</p>

<h3 id="create-a-service-account">Create a Service Account</h3>

<p><em>Path:</em></p>

<p><code class="language-plaintext highlighter-rouge">/api/v1/users</code></p>

<p><em>Request Body:</em></p>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="w">  </span><span class="p">{</span><span class="w">
    </span><span class="nl">"username"</span><span class="p">:</span><span class="s2">"test@test.de"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"firstname"</span><span class="p">:</span><span class="s2">"a"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"lastname"</span><span class="p">:</span><span class="s2">"b"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"role"</span><span class="p">:</span><span class="s2">"SERVICE_ACCOUNT"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"status"</span><span class="p">:</span><span class="s2">"ACTIVE"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"password"</span><span class="p">:</span><span class="s2">"asd"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"permissions"</span><span class="p">:[</span><span class="w">
      </span><span class="s2">"all"</span><span class="w">
    </span><span class="p">]</span><span class="w">
  </span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<p><em>Response Body Structure:</em></p>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="nl">"id"</span><span class="p">:</span><span class="w"> </span><span class="s2">"string"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"username"</span><span class="p">:</span><span class="w"> </span><span class="s2">"string"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"firstname"</span><span class="p">:</span><span class="w"> </span><span class="s2">"string"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"lastname"</span><span class="p">:</span><span class="w"> </span><span class="s2">"string"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"status"</span><span class="p">:</span><span class="w"> </span><span class="s2">"active"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"tenant"</span><span class="p">:</span><span class="w"> </span><span class="s2">"string"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"roles"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
    </span><span class="p">{</span><span class="w">
      </span><span class="nl">"name"</span><span class="p">:</span><span class="w"> </span><span class="s2">"string"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"permissions"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
        </span><span class="s2">"all"</span><span class="w">
      </span><span class="p">],</span><span class="w">
      </span><span class="nl">"scope"</span><span class="p">:</span><span class="w"> </span><span class="s2">"string"</span><span class="w">
    </span><span class="p">}</span><span class="w">
  </span><span class="p">],</span><span class="w">
  </span><span class="nl">"permissions"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
    </span><span class="s2">"all"</span><span class="w">
  </span><span class="p">],</span><span class="w">
  </span><span class="nl">"confirmed"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="p">,</span><span class="w">
  </span><span class="nl">"img"</span><span class="p">:</span><span class="w"> </span><span class="s2">"string"</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<p>Use the returned <code class="language-plaintext highlighter-rouge">id</code> in the following request to create the token.</p>

<h3 id="create-persistent-service-token">Create persistent Service Token</h3>

<p><em>Path:</em></p>

<p><code class="language-plaintext highlighter-rouge">/api/v1/tokens</code></p>

<p><em>Request Body:</em></p>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="nl">"accountId"</span><span class="p">:</span><span class="w"> </span><span class="s2">"PASTE SERVICE ACCOUNT ID HERE"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"expiresIn"</span><span class="p">:</span><span class="w"> </span><span class="mi">-1</span><span class="p">,</span><span class="w">
  </span><span class="nl">"initiator"</span><span class="p">:</span><span class="w"> </span><span class="s2">"PASTE SERVICE ACCOUNT ID HERE"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"inquirer"</span><span class="p">:</span><span class="w"> </span><span class="s2">"PASTE SERVICE ACCOUNT ID HERE"</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<p>The returned token is the service token that will be used by the other services to authenticate themselves to the IAM. Copy the value, encode it in <em>base64</em> (for encoding you can use online tools such as: <a href="https://www.base64encode.org/">https://www.base64encode.org/</a>), and then past it into the file found at <code class="language-plaintext highlighter-rouge">./3-Secret/SharedSecret.yaml</code> at the indicated position (<code class="language-plaintext highlighter-rouge">REPLACE ME</code>).</p>

<h2 id="shared-secret-application">Shared Secret Application</h2>

<p>Apply the shared secret via</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>kubectl apply -f ./3-Secret.
</code></pre></div></div>

<p>Ordinarily, each service would have its own secret for security reasons, but this is simplified for ease of use in a local context</p>

<h2 id="service-deployment">Service Deployment</h2>

<p>Deploy the remaining services via the following command. This may take a while.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>kubectl apply -Rf ./4-Services
</code></pre></div></div>

<h2 id="service-availability">Service Availability</h2>

<p>The Open Integration Hub is now running and ought to function just as it would in an online context. You can reach the various services via the following URLS:</p>

<ul>
  <li><strong>Identity and Access Management</strong>. Create and modify users, tenants, roles, and permissions.
    <ul>
      <li><code class="language-plaintext highlighter-rouge">iam.localoih.com</code></li>
    </ul>
  </li>
  <li><strong>Secret Service</strong>. Securely store authentication data for other applications.
    <ul>
      <li><code class="language-plaintext highlighter-rouge">skm.localoih.com</code></li>
    </ul>
  </li>
  <li><strong>Flow Repository</strong>. Create, modify, and start/stop integration flows.
    <ul>
      <li><code class="language-plaintext highlighter-rouge">flow-repository.localoih.com</code></li>
    </ul>
  </li>
  <li><strong>Audit Log</strong>. View event logs spawned by the other services.
    <ul>
      <li><code class="language-plaintext highlighter-rouge">auditlog.localoih.com</code></li>
    </ul>
  </li>
  <li><strong>Metadata Repository</strong>. Create and modify master data models used by your connectors.
    <ul>
      <li><code class="language-plaintext highlighter-rouge">metadata.localoih.com</code></li>
    </ul>
  </li>
  <li><strong>Component Repository</strong>. Store and modify connector components.
    <ul>
      <li><code class="language-plaintext highlighter-rouge">component-repository.localoih.com</code></li>
    </ul>
  </li>
  <li><strong>Attachment Storage Service</strong>. Temporarily store larger files for easier handling in flows.
    <ul>
      <li><code class="language-plaintext highlighter-rouge">attachment-storage-service.localoih.com</code></li>
    </ul>
  </li>
  <li><strong>Data Hub</strong>. Long-term storage for flow content.
    <ul>
      <li><code class="language-plaintext highlighter-rouge">data-hub.localoih.com</code></li>
    </ul>
  </li>
  <li><strong>Integration Layer Service</strong>. Perform data operations such as merging or splitting objects.
    <ul>
      <li><code class="language-plaintext highlighter-rouge">ils.localoih.com</code></li>
    </ul>
  </li>
  <li><strong>Web UI</strong>. A basic browser-based UI to control certain other services.
    <ul>
      <li><code class="language-plaintext highlighter-rouge">web-ui.localoih.com</code></li>
    </ul>
  </li>
</ul>

<p>Most of these services have an OpenAPI documentation of their API available through the path <code class="language-plaintext highlighter-rouge">/api-docs</code>. You can also check the <a href="https://openintegrationhub.github.io/docs/API%20Reference/APIReferenceOverview.html">API Reference Documentation</a>. If you want to learn more about the services, check the <a href="https://openintegrationhub.github.io/docs/Services/Services.html">Service Documentation</a> or their readmes in the <code class="language-plaintext highlighter-rouge">services</code> folder of the GitHub Repository: <a href="https://github.com/openintegrationhub/openintegrationhub/tree/master/services">Open Integration Hub Services</a></p>

<h1 id="user-tutorial">User Tutorial</h1>

<p>The following step-by-step guide will show you how you can add your first components and create a flow with these components via the web ui which you deployed already.
All actions are also performable via postman or similar tools.</p>

<h2 id="creating-components">Creating Components</h2>

<p>First, we have to create two components in order to have a source and target component.</p>

<p>Below you will find code snippets for two exemplary components. For the beginning we recommend to use those but feel free to use your own.</p>

<p><strong>Example 1:</strong></p>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
   </span><span class="nl">"data"</span><span class="p">:{</span><span class="w">
      </span><span class="nl">"distribution"</span><span class="p">:{</span><span class="w">
         </span><span class="nl">"type"</span><span class="p">:</span><span class="s2">"docker"</span><span class="p">,</span><span class="w">
         </span><span class="nl">"image"</span><span class="p">:</span><span class="s2">"elasticio/timer:ca9a6fea391ffa8f7c8593bd2a04143212ab63f6"</span><span class="w">
      </span><span class="p">},</span><span class="w">
      </span><span class="nl">"access"</span><span class="p">:</span><span class="s2">"public"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"name"</span><span class="p">:</span><span class="s2">"Timer"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"description"</span><span class="p">:</span><span class="s2">"Timer component that periodically triggers flows on a given interval"</span><span class="w">
   </span><span class="p">}</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<p><strong>Example 2:</strong></p>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
    </span><span class="nl">"data"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
        </span><span class="nl">"distribution"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
            </span><span class="nl">"type"</span><span class="p">:</span><span class="w"> </span><span class="s2">"docker"</span><span class="p">,</span><span class="w">
            </span><span class="nl">"image"</span><span class="p">:</span><span class="w"> </span><span class="s2">"elasticio/code-component:7bc2535df2f8a35c3653455e5becc701b010d681"</span><span class="w">
        </span><span class="p">},</span><span class="w">
        </span><span class="nl">"access"</span><span class="p">:</span><span class="w"> </span><span class="s2">"public"</span><span class="p">,</span><span class="w">
        </span><span class="nl">"name"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Node.js code"</span><span class="p">,</span><span class="w">
        </span><span class="nl">"description"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Node.js code component that executes the provided code"</span><span class="w">
      </span><span class="p">}</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<p>The timer component is used to trigger flows on a provided interval, while the code component executes the code that was provided by the flow creator.</p>

<p>In order to add those components, visit the web ui (<code class="language-plaintext highlighter-rouge">web-ui.localoih.com</code>) and navigate to the <code class="language-plaintext highlighter-rouge">Components</code> section.</p>

<p align="left">
  <img src="https://raw.githubusercontent.com/openintegrationhub/openintegrationhub.github.io/master/assets/images/menu.png" alt="Sublime's custom image" width="150" />
</p>

<p>Now click on the <code class="language-plaintext highlighter-rouge">ADD+</code> button. A popup window will appear where you can add the code provided above.</p>

<p align="left">
  <img src="https://raw.githubusercontent.com/openintegrationhub/openintegrationhub.github.io/master/assets/images/AddComponent.png" alt="Sublime's custom image" width="1200" />
</p>

<p align="left">
  <img src="https://raw.githubusercontent.com/openintegrationhub/openintegrationhub.github.io/master/assets/images/popUpWindowComponent.PNG" alt="Sublime's custom image" width="300" />
</p>

<p><strong>GREAT!</strong> You created your first component.</p>

<p>Repeat this step for the second component.</p>

<p><strong>!!</strong> In order to create the flow in the next step you have to copy the <code class="language-plaintext highlighter-rouge">ids</code> of the components you just created. <strong>!!</strong></p>

<h2 id="creating-flows">Creating Flows</h2>

<p>Now that you successfully created two components it is time to create your first flow.</p>

<p>Below you will find code snippets for an example flow. This excample flow periodically triggers the flow and sends request to webhook.site. For the beginning we recommend to use this flow but feel free to create your own.</p>

<p>Please replace the <code class="language-plaintext highlighter-rouge">ADD COMPONENT ID HERE</code> with the <code class="language-plaintext highlighter-rouge">ids</code> you copied in the previous step. Furthermore please go to <a href="http://webhook.site/"></a> and copy the link to you clipboard.
Afterwards please replace the <code class="language-plaintext highlighter-rouge">ADD WEBHOOK URL HERE</code> with the link in your clipboard.</p>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
   </span><span class="nl">"name"</span><span class="p">:</span><span class="s2">"Timer To Code Component Example"</span><span class="p">,</span><span class="w">
   </span><span class="nl">"description:"</span><span class="p">:</span><span class="w"> </span><span class="s2">"This flow periodically triggers the flow and sends request to webhook.site"</span><span class="p">,</span><span class="w">
   </span><span class="nl">"graph"</span><span class="p">:{</span><span class="w">
      </span><span class="nl">"nodes"</span><span class="p">:[</span><span class="w">
         </span><span class="p">{</span><span class="w">
            </span><span class="nl">"id"</span><span class="p">:</span><span class="s2">"step_1"</span><span class="p">,</span><span class="w">
            </span><span class="nl">"componentId"</span><span class="p">:</span><span class="s2">"ADD COMPONENT ID HERE"</span><span class="p">,</span><span class="w">
            </span><span class="nl">"function"</span><span class="p">:</span><span class="s2">"timer"</span><span class="w">
         </span><span class="p">},</span><span class="w">
         </span><span class="p">{</span><span class="w">
            </span><span class="nl">"id"</span><span class="p">:</span><span class="s2">"step_2"</span><span class="p">,</span><span class="w">
            </span><span class="nl">"componentId"</span><span class="p">:</span><span class="s2">"ADD COMPONENT ID HERE"</span><span class="p">,</span><span class="w">
            </span><span class="nl">"function"</span><span class="p">:</span><span class="s2">"execute"</span><span class="p">,</span><span class="w">
            </span><span class="nl">"fields"</span><span class="p">:{</span><span class="w">
               </span><span class="nl">"code"</span><span class="p">:</span><span class="s2">"function* run() {console.log('Calling external URL');yield request.post({uri: 'ADD WEBHOOK URL HERE', body: msg, json: true});}"</span><span class="w">
            </span><span class="p">}</span><span class="w">
         </span><span class="p">}</span><span class="w">
      </span><span class="p">],</span><span class="w">
      </span><span class="nl">"edges"</span><span class="p">:[</span><span class="w">
         </span><span class="p">{</span><span class="w">
            </span><span class="nl">"source"</span><span class="p">:</span><span class="s2">"step_1"</span><span class="p">,</span><span class="w">
            </span><span class="nl">"target"</span><span class="p">:</span><span class="s2">"step_2"</span><span class="w">
         </span><span class="p">}</span><span class="w">
      </span><span class="p">]</span><span class="w">
   </span><span class="p">},</span><span class="w">
   </span><span class="nl">"cron"</span><span class="p">:</span><span class="s2">"*/2 * * * *"</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<p>In order to add the flow, navigate to the <code class="language-plaintext highlighter-rouge">Flows</code> section.</p>

<p align="left">
  <img src="https://raw.githubusercontent.com/openintegrationhub/openintegrationhub.github.io/master/assets/images//menuFlow.png" alt="Sublime's custom image" width="150" />
</p>

<p>Now click on the <code class="language-plaintext highlighter-rouge">ADD+</code> button. A popup window will appear where you can add the code provided above.</p>

<p align="left">
  <img src="https://raw.githubusercontent.com/openintegrationhub/openintegrationhub.github.io/master/assets/images/AddFlow.png" alt="Sublime's custom image" width="1200" />
</p>

<p align="left">
  <img src="https://raw.githubusercontent.com/openintegrationhub/openintegrationhub.github.io/master/assets/images/popUpWindowFlow.PNG" alt="Sublime's custom image" width="300" />
</p>

<p><strong>GREAT!</strong> You created your first flow.</p>

<h2 id="starting-flows">Starting Flows</h2>

<p>Now that you have created two components and a flow, it is time to start this flow.</p>

<p>Stay in the flows section and look for the flow you just created. On the right side you will the a “play” symbol.</p>

<p align="left">
  <img src="https://raw.githubusercontent.com/openintegrationhub/openintegrationhub.github.io/master/assets/images/play.png" alt="Sublime's custom image" width="300" />
</p>

<p>Click on it and the how the status changes from <code class="language-plaintext highlighter-rouge">inactive</code> to <code class="language-plaintext highlighter-rouge">starting</code>.</p>

<p align="left">
  <img src="https://raw.githubusercontent.com/openintegrationhub/openintegrationhub.github.io/master/assets/images/inactive.PNG" alt="Sublime's custom image" width="500" />
</p>

<p align="left">
  <img src="https://raw.githubusercontent.com/openintegrationhub/openintegrationhub.github.io/master/assets/images/starting.PNG" alt="Sublime's custom image" width="500" />
</p>

<p>After some time the status changes to <code class="language-plaintext highlighter-rouge">active</code> and the flow is running (you may have to refresh the site).</p>

<p align="left">
  <img src="https://raw.githubusercontent.com/openintegrationhub/openintegrationhub.github.io/master/assets/images/active.PNG" alt="Sublime's custom image" width="500" />
</p>

<h2 id="lessons-learned">Lessons Learned</h2>

<p>In this tutorial you have learned…</p>

<ol>
  <li>How to create components via the web ui</li>
  <li>How to create a flow within the Open Integration Hub using existing components</li>
  <li>How to start a flow and track its status</li>
</ol>
:ET