I"<!-- Description Guidelines

Please note:
Use the full links to reference other files or images! Relative links will not work under our theme settings.
-->

<!-- please choose the appropriate batch and delete/comment the others  -->
<p><img src="https://img.shields.io/badge/Status-Production-brightgreen.svg" alt="prod" /></p>

<h1 id="dispatcher-service-"><strong>Dispatcher Service</strong> <!-- make sure spelling is consistent with other sources and within this document --></h1>

<h2 id="introduction">Introduction</h2>
<!-- 2 sentences: what does it do and how -->

<p>The Dispatcher Service is responsible for routing messages between individual connector flows. This allows for the exchange of data in a centralized fashion via the Hub &amp; Spoke model.</p>

<p><a href="http://dispatcher-service.openintegrationhub.com/api-docs/" class="btn fs-5 mb-4 mb-md-0">API Reference</a>
<a href="https://github.com/openintegrationhub/openintegrationhub/tree/master/services/dispatcher-service" class="btn fs-5 mb-4 mb-md-0">Implementation</a>
<!-- [Service File](){: .btn .fs-5 .mb-4 .mb-md-0 } --></p>

<h2 id="technologies-used">Technologies used</h2>
<!-- please name and elaborate on other technologies or standards the service uses -->
<p><a href="https://www.mongodb.com/">MongoDB</a>: MongoDB is used as the Dispatcher Service’s storage solution.</p>

<h2 id="how-it-works">How it works</h2>
<!-- describe core functionalities and underlying concepts in more detail -->
<h3 id="dispatch-configurations">Dispatch Configurations.</h3>

<p>The Dispatcher Service works on the basis of <em>Configurations</em>. Each configuration contains a list of connected applications, each of which may have one or several outbound (application-to-OIH) and inbound (OIH-to-application) connections. These connections are distinguished based on the data schema and operation (i.e. create/update/delete) they use.</p>

<p>Once such a configuration has been saved, the Dispatcher Service independently monitors incoming data from the listed outbound connections. Whenever a piece of data from one of these connections is successfully processed by the Data Hub, the Dispatcher Service then checks the configuration for any apps with matching inbound connections. To qualify, both the operation and data schema of the inbound connection must match that of the new data. For example, a piece of data in the “Organization” schema will not be routed to a connection configured to use the “Person” schema.</p>

<h3 id="technological-background">Technological Background</h3>

<p>The Dispatcher Service functions on the basis of flows. However, instead of direct app-to-app connector flows, it uses app-to-OIH and OIH-to-app integration flows.</p>

<p>Whenever a dispatch configuration is created or updated, the Dispatcher Service automatically creates a number of integration flows, one each for connection of each connected app. These flows connect to and from the Smart Data Framework using the SDF-Adapter. The Dispatcher Service automatically keeps stock and maintains these flows. If an inbound flow is inactive when data for it comes in, it will automatically be started. If a configuration is deleted or an app removed, all associated flows are automatically deleted.</p>

<p>Data handled in this manner is routed through the Message Oriented Middleware (MOM). Any time a new piece of data coming in from an outbound flow was successfully processed by the Data Hub, a message is published on the MOM containing both the actual data that was fetched from the app (the payload) as well as certain metadata denoting its source, schema, and so on.</p>

<p>These messages are then received by the Dispatcher Service. Based on their metadata, the Dispatcher Service is able to identify the source of the data and find all appropriate consumers based on saved dispatch configurations. Each consumer has an associated integration flow, and the Dispatcher Service then sends a message with custom-tailored metadata (such as the recordUid that the target app can use to identify the data) to each of these flows using the MOM.</p>

<p>Finally, these messages are received by instances of the SDF Adapter, which is the first node in each consuming integration flow. The SDF Adapter then passes on the payload of the message to the next node in line, at which point the data is treated just as in a regular connector flow, passing through a transformer and adapter and finally being passed on to the target application.</p>

<h3 id="dispatcher-service-api">Dispatcher Service API</h3>
<p>The Dispatcher Service offers a REST API through which dispatch configurations can be created, modified, and deleted. To interact with this API, the user must supply a valid bearer token generated by the <a href="https://openintegrationhub.github.io//docs/Services/IdentityManagement.html">Identity Management</a>.</p>

<h4 id="list-of-supported-methods-and-routes">List of supported Methods and Routes</h4>
<hr />

<table>
  <thead>
    <tr>
      <th>endpoint</th>
      <th style="text-align: center">method</th>
      <th>description</th>
      <th>comments</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>/dispatches</td>
      <td style="text-align: center">GET</td>
      <td>Returns a list of all dispatch configurations available to the user</td>
      <td>Currently, all configurations are shared by tenant</td>
    </tr>
    <tr>
      <td>/dispatches</td>
      <td style="text-align: center">POST</td>
      <td>Stores a new dispatch configuration</td>
      <td>Automatically creates all integration flows for this configuration</td>
    </tr>
    <tr>
      <td>/dispatches/{id}</td>
      <td style="text-align: center">GET</td>
      <td>Returns one particular dispatch configuration by its ID</td>
      <td> </td>
    </tr>
    <tr>
      <td>/dispatches/{id}</td>
      <td style="text-align: center">DELETE</td>
      <td>Deletes a dispatch configuration</td>
      <td>Automatically deletes all associated flows</td>
    </tr>
    <tr>
      <td>/dispatches/{id}/app</td>
      <td style="text-align: center">PUT</td>
      <td>Adds a new application to a dispatch configuration</td>
      <td>Automatically creates all integration flows for the app</td>
    </tr>
    <tr>
      <td>/dispatches/{id}/app/{appId}</td>
      <td style="text-align: center">DELETE</td>
      <td>Deletes one application from the dispatch configuration</td>
      <td>Automatically deletes the app’s associated integration flows</td>
    </tr>
  </tbody>
</table>

<p>For further details and examples, please refer to the <a href="http://dispatcher-service.openintegrationhub.com/api-docs/">API Reference</a></p>

<h3 id="interaction-with-other-services-and-components">Interaction with other Services and Components</h3>
<p>The Dispatcher Service interacts with these Services:</p>

<ul>
  <li>
    <p><a href="https://openintegrationhub.github.io//docs/Services/IdentityManagement.html">Identity Management</a>: The Dispatcher Service relies on a bearer token supplied by the Identity Management to determine which dispatch configurations the current user may see.</p>
  </li>
  <li>
    <p><a href="https://openintegrationhub.github.io//docs/Services/MessageOrientedMiddleware.html">Message Oriented Middleware</a>: The Dispatcher Service receives and routes all incoming data through the Message Oriented Middleware.</p>
  </li>
  <li>
    <p><a href="https://openintegrationhub.github.io//docs/Services/FlowRepository.html">Flow Repository</a>: The Dispatcher Service communicates with the Flow Repository to create, delete, and start all integration flows necessary for a dispatch configuration.</p>
  </li>
</ul>
:ET